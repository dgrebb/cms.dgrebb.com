#!/bin/bash
export directory=$(dirname $(realpath /usr/local/bin/dg))
source $directory/_scripts/functions.sh

showHelp() {
    printf "${NC}$(basename "$0") [-h] [ d db dbl drb drbl r cms tf] -- program to manage dgrebb.com\n
    -h                      show this help text
    d | dev                 run strapi in development mode outside of docker
    db | dbuild             build docker images for aws
    dbl | dbuildlocal       build docker images to run locally
    drb | drebuild          rebuild docker images for aws
    drbl                    rebuild docker images to run locally
    dp                      push docker image
    r | run                 run local docker image
    cms                     interact with strapi sans docker
        dev                 run strapi in development mode
    tf                      run terraform commands
        i | init            initialize terraform
        iu | init-upgrade   upgrade terraform
        p | plan            plan terraform
        a | apply           apply terraform
    \n\n"
}

hello

while test "$1" != --; do
    case $1 in
    c | cms)
        /bin/bash $directory/_scripts/cms.sh $2
        break
        ;;
    f | front)
        /bin/bash $directory/_scripts/front.sh $2
        break
        ;;
    d | docker)
        /bin/bash $directory/_scripts/docker.sh $2 $3
        break
        ;;
    tf | terraform)
        /bin/bash $directory/_scripts/terraform.sh $2 $3 $4 $5 $6
        break
        ;;
    b | bump)
        cd $directory/../
        config="_utils/_cliff/all.toml"
        file="CHANGELOG.md"
        str=$(cz bump --dry-run | awk '/tag to create: /')
        ver=${str//tag to create: /}
        git cliff -c $config --unreleased --tag $ver --prepend ${file}
        echo "Project Changelog Written to ${file}"
        for D in *; do
            if [ -d "${D}" ]; then
                config="_utils/_cliff/dir.toml"
                git cliff -c $config \
                    --include-path "${D}/*" \
                    --unreleased --tag $ver \
                    --prepend ./${D}/${file} 
                echo "Changelog for ${D} written to ${D}/${file}"
            fi
        done
        git ls-files --modified
        read -p $'\e[31mDo you want to stage the changelog updates for commit?\e[0m: ' -n 1 -r
        echo # newline
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            read -p $'\e[31mDo you want to undo the changelog updates?\e[0m: '
            echo # newline
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 1
            fi
            git restore CHANGELOG.md */CHANGELOG.md
            exit 1
        fi
        git add .
        git status
        read -p $'\e[31mDouble check the staged files. Do you want to commit these changes?\e[0m: ' -n 1 -r
        echo # newline
        git status
        echo # newline
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
        git commit -m "docs(project): updates changelog for ${ver}"
        read -p $'\e[31mDo you want to bump the version now?\e[0m: ' -n 1 -r
        echo # newline
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
        cz bump
        break 2
        ;;
    -h | --help)
        showHelp
        break
        ;;
    --)
        showHelp
        break
        ;;
    *)
        projectPath=$(realpath ${directory}/..)
        if [ $(pwd) = ${projectPath} ]; then
            printDgErr "Unexpected args â€” you done goofed!" ]
            showHelp
        else
            printDgMsg "Moving to project directory"
            cd ${directory}/../
            $SHELL
        fi
        break
        ;;
    esac
done
err=$?
[[ $err != 0 ]] && exit $err
