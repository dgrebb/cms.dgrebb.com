#!/bin/bash
export directory=$(dirname $(realpath /usr/local/bin/dg))
source $directory/_scripts/functions.sh

showHelp() {
    printf "${NC}$(basename "$0") [-h] [ d db dbl drb drbl r f cms tf] -- cli to manage dgrebb.com\n
    -h                      show this help text
    cms                     interact with strapi sans docker
    f | front               frontend run/build commands
    d | dev                 run strapi in development mode outside of docker
    db | dbuild             build docker images for aws
    dbl | dbuildlocal       build docker images to run locally
    drb | drebuild          rebuild docker images for aws
    drbl                    rebuild docker images to run locally
    dp                      push docker image
    r | run                 run local docker image
    tf                      run terraform commands
    \n\n"
}

if [ "$(exec sh -c 'echo "$PPID"')" != "$$" ]; then
    echo "Running dg subshell..."
else
    hello
fi

while test "$1" != --; do
    case $1 in
    c | cms)
        /bin/bash $directory/_scripts/cms.sh $2 $3
        break
        ;;
    f | front)
        /bin/bash $directory/_scripts/front.sh $2 $3 $4
        break
        ;;
    l | lint)
        cd $directory/../front && npm run lint
        break
        ;;
    ck | check)
        cd $directory/../front && npm run check
        break
        ;;
    d | docker)
        /bin/bash $directory/_scripts/docker.sh $2 $3
        break
        ;;
    tf | terraform)
        /bin/bash $directory/_scripts/terraform.sh $2 $3 $4 $5 $6
        break
        ;;
    b | bump)
        /bin/bash $directory/_scripts/bump.sh
        break
        ;;
    ch | changelog)
        /bin/bash $directory/_scripts/changelog.sh
        break
        ;;
    g | github)
        open https://github.com/dgrebb/dgrebb.com
        break
        ;;
    gp | github-project)
        open https://github.com/users/dgrebb/projects/12
        break
        ;;
    a | act)
        /bin/bash $directory/_scripts/act.sh $2 $3
        break
        ;;
    tp | test-performance | lighthouse)
        /bin/bash $directory/_scripts/perf.sh $2
        break
        ;;
    tv | test-visual | backstop)
        /bin/bash $directory/_scripts/visual-regression.sh test $2
        break
        ;;
    tvt | test-visual-skip-build | backstop-test)
        /bin/bash $directory/_scripts/visual-regression.sh test-now $2
        break
        ;;
    tvr | test-visual-remote-service | backstop-remote)
        /bin/bash $directory/_scripts/visual-regression.sh remote $2
        break
        ;;
    tvref | test-visual-ref | backstop-reference)
        /bin/bash $directory/_scripts/visual-regression.sh ref $2
        break
        ;;
    tva | test-visual-approve | backstop-approve)
        /bin/bash $directory/_scripts/visual-regression.sh approve $2
        break
        ;;
    sp | spelling | cspell)
        /bin/bash $directory/../_ci/spell/content.sh $2
        break
        ;;
    -h | --help)
        showHelp
        break
        ;;
    --)
        showHelp
        break
        ;;
    *)
        projectPath=$(realpath ${directory}/..)
        if [ $(pwd) = ${projectPath} ]; then
            printDgErr "Unexpected args â€” you done goofed!" ]
            echo
            showHelp
        else
            printDgMsg "Moving to project directory"
            cd ${directory}/../
            $SHELL
        fi
        break
        ;;
    esac
done
err=$?
[[ $err != 0 ]] && exit $err
